#include <iostream>
#include <string>
using namespace std;

typedef struct HNode *Heap;
struct HNode
{
    int *data;
    int size;
};
typedef Heap MinHeap;

MinHeap CreatHeap(int n)
{
    MinHeap H = (MinHeap)malloc(sizeof(struct HNode));
    H->data = (int *)malloc(sizeof(n + 1));
    H->size = 0;
    H->data[0] = -10001;
    return H;
}

void Insert(MinHeap H, int x)
{
    int i;
    for (i = H->size + 1; H->data[i / 2] > x; i /= 2)
        H->data[i] = H->data[i / 2];
    H->data[i] = x;
    H->size++;
}

int Index(MinHeap H, int x)
{
    for (int i = 1; i <= H->size; i++)
    {
        if (H->data[i] == x)
            return i;
    }
    return 0;
}

bool Judge(MinHeap H)
{
    int a, b, p1, p2;
    string s;
    cin >> a >> s;
    if (s[0] == 'a') /* A and B are siblings */
    {
        cin >> b >> s >> s;
        p1 = Index(H, a) / 2;
        p2 = Index(H, b) / 2;
        if (p1 == p2)
            return true;
        else
            return false;
    }
    else
    {
        cin >> s;
        if (s[0] == 'a') /* A is a child of B */
        {
            cin >> s >> s >> b;
            p1 = Index(H, a) / 2;
            if (p1 == Index(H, b))
                return true;
            else
                return false;
        }
        else
        {
            cin >> s;
            if (s[0] == 'p') /* A is the parent of B */
            {
                cin >> s >> b;
                p2 = Index(H, b) / 2;
                if (p2 == Index(H, a))
                    return true;
                else
                    return false;
            }
            else /* A is the root */
            {
                if (a == H->data[1])
                    return true;
                else
                    return false;
            }
        }
    }
}

int main()
{
    freopen("a.txt", "r", stdin);
    int n, m, t;
    cin >> n >> m;

    MinHeap H;
    H = CreatHeap(n);

    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &t);
        Insert(H, t);
    }
    for (int i = 0; i < m; i++)
    {
        if (Judge(H))
            printf("T\n");
        else
            printf("F\n");
    }
    return 0;
}